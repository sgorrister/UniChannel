import os
import sqlite3
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    PicklePersistence
)

# –î–ª—è ConversationHandler (—Å—Ç–∞–Ω–∏):
from telegram.ext import (
    ConversationHandler
)

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ß–∏—Ç–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

# --- –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ ---
DB_PATH = "channels.db"

# --- –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è ConversationHandler ---
CHOOSING, ADDING, REMOVING, SETTING_TARGET = range(4)

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö ---
def init_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ —ñ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            channel TEXT UNIQUE
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS target_channel (
            id INTEGER PRIMARY KEY CHECK (id = 1),
            channel TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_channel_db(channel: str) -> bool:
    """–î–æ–¥–∞—î –∫–∞–Ω–∞–ª (ID –∞–±–æ @username) —É —Å–ø–∏—Å–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO channels (channel) VALUES (?)", (channel,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_channel_db(channel: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM channels WHERE channel = ?", (channel,))
    conn.commit()
    result = c.rowcount > 0
    conn.close()
    return result

def list_channels_db() -> list:
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM channels")
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]

def set_target_channel_db(channel: str):
    """–ó–∞–¥–∞—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        INSERT INTO target_channel (id, channel)
        VALUES (1, ?)
        ON CONFLICT(id) DO UPDATE SET channel=excluded.channel
    """, (channel,))
    conn.commit()
    conn.close()

def get_target_channel_db():
    """–û—Ç—Ä–∏–º—É—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM target_channel WHERE id = 1")
    row = c.fetchone()
    conn.close()
    return row[0] if row else None


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def main_menu_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï Add channel"), KeyboardButton("‚ûñ Remove channel")],
            [KeyboardButton("üìã List channels"), KeyboardButton("üéØ Set target")],
            [KeyboardButton("üéØ Get target"), KeyboardButton("‚ùå Exit")]
        ],
        resize_keyboard=True
    )

# --- –õ–æ–≥—ñ–∫–∞ ConversationHandler ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start: –í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω CHOOSING, –¥–µ —á–µ–∫–∞—î–º–æ –≤–∏–±–æ—Ä—É –¥—ñ—ó.
    """
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu_keyboard()
    )
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é (Add channel, Remove channel —Ç–æ—â–æ).
    –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±–æ—Ä—É ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —ñ–Ω—à–∏–π —Å—Ç–∞–Ω –∞–±–æ –≤–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—é.
    """
    text = update.message.text

    if text == "‚ûï Add channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏:")
        return ADDING

    elif text == "‚ûñ Remove channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        return REMOVING

    elif text == "üìã List channels":
        channels = list_channels_db()
        if channels:
            msg = "üìã –ú–æ–Ω—ñ—Ç–æ—Ä—è—Ç—å—Å—è —Ç–∞–∫—ñ –∫–∞–Ω–∞–ª–∏:\n" + "\n".join(channels)
        else:
            msg = "‚ÑπÔ∏è –ù–µ–º–∞—î –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤."
        await update.message.reply_text(msg, reply_markup=main_menu_keyboard())
        return CHOOSING

    elif text == "üéØ Set target":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, –∫—É–¥–∏ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –ø–æ—Å—Ç–∏:")
        return SETTING_TARGET

    elif text == "üéØ Get target":
        channel = get_target_channel_db()
        if channel:
            await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {channel}",
                                            reply_markup=main_menu_keyboard())
        else:
            await update.message.reply_text("–¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª —â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.",
                                            reply_markup=main_menu_keyboard())
        return CHOOSING

    elif text == "‚ùå Exit":
        await update.message.reply_text("–ë—É–≤–∞–π!", reply_markup=None)
        return ConversationHandler.END

    else:
        # –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
                                        reply_markup=main_menu_keyboard())
        return CHOOSING

# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ ---
async def adding_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, —â–æ–± –¥–æ–¥–∞—Ç–∏."""
    channel = update.message.text.strip()
    if add_channel_db(channel):
        await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.",
                                        reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
                                        reply_markup=main_menu_keyboard())
    return CHOOSING

async def removing_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏."""
    channel = update.message.text.strip()
    if remove_channel_db(channel):
        await update.message.reply_text(f"üóë –ö–∞–Ω–∞–ª {channel} –≤–∏–¥–∞–ª–µ–Ω–æ.",
                                        reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text(f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.",
                                        reply_markup=main_menu_keyboard())
    return CHOOSING

async def setting_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å ID –∞–±–æ @username –∫–∞–Ω–∞–ª—É, —è–∫–∏–π —Å—Ç–∞–Ω–µ —Ü—ñ–ª—å–æ–≤–∏–º –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."""
    channel = update.message.text.strip()
    set_target_channel_db(channel)
    await update.message.reply_text(f"üéØ –¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {channel}",
                                    reply_markup=main_menu_keyboard())
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–π—Ç–∏ –∑ —Ä–æ–∑–º–æ–≤–∏ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ.
    """
    await update.message.reply_text("–í–∏—Ö—ñ–¥ —ñ–∑ –º–µ–Ω—é.", reply_markup=None)
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ —ñ–∑ –∫–∞–Ω–∞–ª—ñ–≤ ---
async def channel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ—Å—Ç–∏ –∑ –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —É —Ü—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª.
    –Ø–∫—â–æ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É –Ω–µ–º–∞—î, –ø–µ—Ä–µ—Å–∏–ª–∞—î —É —Ç–æ–π —Å–∞–º–∏–π –∫–∞–Ω–∞–ª (—É–º–æ–≤–Ω–æ "–≤ —Å–µ–±–µ").
    """
    channel_id = update.channel_post.chat.id
    monitored_channels = list_channels_db()
    target_channel = get_target_channel_db() or channel_id  # –Ø–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø–µ—Ä–µ—Å–∏–ª–∞—î –≤ –¥–∂–µ—Ä–µ–ª–æ

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–∞–Ω–∞–ª —É —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–∑–∞ ID –∞–±–æ @username)
    # channel_id (int) —É Telegram —á–∞—Å—Ç–æ –≤–∏–≥–ª—è–¥–∞—î —è–∫ -1001234567890
    # username = update.channel_post.chat.username
    username = update.channel_post.chat.username

    in_list_by_id = str(channel_id) in monitored_channels
    in_list_by_username = (f"@{username}" in monitored_channels) if username else False

    if in_list_by_id or in_list_by_username:
        try:
            await context.bot.forward_message(
                chat_id=target_channel,
                from_chat_id=channel_id,
                message_id=update.channel_post.message_id
            )
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∑ {channel_id} —É {target_channel}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    init_db()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ (–±–æ—Ç)
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ persistence –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Ä–æ–∑–º–æ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–ø–∏—Å—É—î–º–æ ConversationHandler, —è–∫–∏–π –∫–µ—Ä—É–≤–∞—Ç–∏–º–µ "–ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–º –º–µ–Ω—é"
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],

        states={
            CHOOSING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)
            ],
            ADDING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adding_channel)
            ],
            REMOVING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, removing_channel)
            ],
            SETTING_TARGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, setting_target)
            ],
        },

        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –π–æ–≥–æ
    app.add_handler(conv_handler)

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ —ñ–∑ –∫–∞–Ω–∞–ª—ñ–≤ (–Ω–µ –ø–ª—É—Ç–∞—î–º–æ –∑ –æ—Å–æ–±–∏—Å—Ç–∏–º –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è–º)
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.CHANNEL, channel_post_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
