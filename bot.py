import os
import sqlite3
import logging

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler
)


# –°–¢–ê–ù–ò —Ä–æ–∑–º–æ–≤–∏ (ConversationHandler)
MAIN_MENU, ADDING_GROUP, REMOVING_GROUP, SELECTING_GROUP_TEXT, GROUP_MENU, \
    ADDING_CHANNEL, REMOVING_CHANNEL, SETTING_TARGET = range(8)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

DB_PATH = "channels.db"


# ------------------------------------------------------------------------------------
#                         –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ –î–ê–ù–ò–•
# ------------------------------------------------------------------------------------

def init_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≥—Ä—É–ø —Ç–∞ —ó—Ö–Ω—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL,
            target_channel TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS group_channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_id INTEGER NOT NULL,
            channel TEXT NOT NULL,
            UNIQUE (group_id, channel),
            FOREIGN KEY (group_id) REFERENCES groups(id) ON DELETE CASCADE
        )
    ''')
    conn.commit()
    conn.close()


# ----------------------- –†–æ–±–æ—Ç–∞ –∑ GROUPS -----------------------

def add_group_db(name: str) -> bool:
    """
    –î–æ–¥–∞—î –Ω–æ–≤—É –≥—Ä—É–ø—É –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –Ø–∫—â–æ —Ç–∞–∫–∞ –≥—Ä—É–ø–∞ —ñ—Å–Ω—É—î ‚Äì False.
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO groups (name) VALUES (?)", (name,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_group_db(name: str) -> bool:
    """
    –í–∏–¥–∞–ª—è—î –≥—Ä—É–ø—É –∑–∞ –Ω–∞–∑–≤–æ—é (—ñ –≤—Å—ñ —ó—ó –∫–∞–Ω–∞–ª–∏).
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –≥—Ä—É–ø—É –≤–∏–¥–∞–ª–µ–Ω–æ.
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM groups WHERE name = ?", (name,))
    conn.commit()
    deleted = c.rowcount > 0
    conn.close()
    return deleted

def list_groups_db() -> list:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (id, name, target_channel) —É—Å—ñ—Ö –≥—Ä—É–ø."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, name, target_channel FROM groups ORDER BY id")
    rows = c.fetchall()
    conn.close()
    return rows  # [(group_id, name, target), ...]

def get_group_id_by_name(name: str):
    """–ó–∞ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏ –æ—Ç—Ä–∏–º—É—î–º–æ —ó—ó id, –∞–±–æ None."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id FROM groups WHERE name = ?", (name,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def get_group_name_by_id(group_id: int):
    """–ó–∞ group_id –æ—Ç—Ä–∏–º—É—î–º–æ name."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# ----------------------- –†–æ–±–æ—Ç–∞ –∑ group_channels -----------------------

def add_channel_to_group_db(group_id: int, channel: str) -> bool:
    """
    –î–æ–¥–∞—î –∫–∞–Ω–∞–ª (ID –∞–±–æ @username) –≤ –≥—Ä—É–ø—É group_id.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –¥–æ–¥–∞–Ω–æ. –Ø–∫—â–æ –≤–∂–µ –±—É–ª–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ ‚Äì False.
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO group_channels (group_id, channel) VALUES (?, ?)", (group_id, channel))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_channel_from_group_db(group_id: int, channel: str) -> bool:
    """
    –í–∏–¥–∞–ª—è—î –∫–∞–Ω–∞–ª —ñ–∑ –≥—Ä—É–ø–∏.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —â–æ—Å—å –≤–∏–¥–∞–ª–µ–Ω–æ.
    """
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM group_channels WHERE group_id = ? AND channel = ?", (group_id, channel))
    conn.commit()
    deleted = c.rowcount > 0
    conn.close()
    return deleted

def list_channels_in_group_db(group_id: int) -> list:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ —É –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –≥—Ä—É–ø—ñ."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM group_channels WHERE group_id = ?", (group_id,))
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]

# ----------------------- –†–æ–±–æ—Ç–∞ –∑ target_channel -----------------------

def set_group_target_db(group_id: int, target_channel: str):
    """–ó–∞–¥–∞—î (–∞–±–æ –∑–º—ñ–Ω—é—î) target_channel —É —Ç–∞–±–ª–∏—Ü—ñ groups."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE groups SET target_channel = ? WHERE id = ?", (target_channel, group_id))
    conn.commit()
    conn.close()

def get_group_target_db(group_id: int):
    """–ü–æ–≤–µ—Ä—Ç–∞—î target_channel –¥–ª—è –≥—Ä—É–ø–∏ group_id, –∞–±–æ None."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT target_channel FROM groups WHERE id = ?", (group_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None


# ------------------------------------------------------------------------------------
#                         –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# ------------------------------------------------------------------------------------

def main_menu_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï Add Group"), KeyboardButton("‚ûñ Remove Group")],
            [KeyboardButton("üìã List Groups"), KeyboardButton("üîΩ Select Group")],
            [KeyboardButton("‚ùå Exit")],
        ],
        resize_keyboard=True
    )

def group_menu_keyboard():
    """–ú–µ–Ω—é –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏: –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏, target —Ç–æ—â–æ."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï Add Channel"), KeyboardButton("‚ûñ Remove Channel")],
            [KeyboardButton("üìã List Channels"), KeyboardButton("üéØ Set Target")],
            [KeyboardButton("üéØ Get Target"), KeyboardButton("‚¨ÖÔ∏è Back to Main Menu")],
        ],
        resize_keyboard=True
    )

# ------------------------------------------------------------------------------------
#                         –õ–û–ì–Ü–ö–ê –†–û–ó–ú–û–í–ò (ConversationHandler)
# ------------------------------------------------------------------------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äì –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω MAIN_MENU.
    """
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç —ñ–∑ –∫—ñ–ª—å–∫–æ–º–∞ –≥—Ä—É–ø–∞–º–∏.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


# ------------------------ MAIN MENU ------------------------
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é."""
    text = update.message.text

    if text == "‚ûï Add Group":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏:")
        return ADDING_GROUP

    elif text == "‚ûñ Remove Group":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        return REMOVING_GROUP

    elif text == "üìã List Groups":
        all_groups = list_groups_db()  # [(id, name, target), ...]
        if all_groups:
            lines = []
            for g_id, g_name, tgt in all_groups:
                line = f"- **{g_name}** (target: {tgt if tgt else '–Ω–µ –∑–∞–¥–∞–Ω–æ'})"
                lines.append(line)
            msg = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø:\n" + "\n".join(lines)
        else:
            msg = "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏."
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=main_menu_keyboard())
        return MAIN_MENU

    elif text == "üîΩ Select Group":
        groups = list_groups_db()
        if not groups:
            await update.message.reply_text("–ù–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è –≤–∏–±–æ—Ä—É!", reply_markup=main_menu_keyboard())
            return MAIN_MENU
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ InlineKeyboard –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø
        buttons = []
        for g_id, g_name, g_target in groups:
            buttons.append([InlineKeyboardButton(text=g_name, callback_data=f"select_group_{g_id}")])

        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=markup)

        # –ú–∏ –ª–∏—à–∞—î–º–æ—Å—å —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ, –∞–ª–µ –æ—á—ñ–∫—É—î–º–æ CallbackQuery
        return MAIN_MENU

    elif text == "‚ùå Exit":
        await update.message.reply_text("–ë—É–≤–∞–π!", reply_markup=None)
        return ConversationHandler.END

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        return MAIN_MENU

async def adding_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏."""
    group_name = update.message.text.strip()
    if add_group_db(group_name):
        await update.message.reply_text(
            f"‚úÖ –ì—Ä—É–ø—É '{group_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ì—Ä—É–ø–∞ –∑ –Ω–∞–∑–≤–æ—é '{group_name}' –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU

async def removing_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏."""
    group_name = update.message.text.strip()
    if remove_group_db(group_name):
        await update.message.reply_text(
            f"üóë –ì—Ä—É–ø—É '{group_name}' –≤–∏–¥–∞–ª–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ì—Ä—É–ø—É '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU


# ----------------------- SELECTING GROUP (CallbackQuery) -----------------------

async def select_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î callback_data —Ç–∏–ø—É "select_group_123" —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —É GROUP_MENU –∑ –æ–±—Ä–∞–Ω–æ—é –≥—Ä—É–ø–æ—é.
    """
    query = update.callback_query
    await query.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ "loading" —ñ–∫–æ–Ω–∫—É

    data = query.data  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "select_group_7"
    if data.startswith("select_group_"):
        group_id_str = data.replace("select_group_", "")
        try:
            group_id = int(group_id_str)
        except ValueError:
            await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ group_id.")
            return MAIN_MENU

        group_name = get_group_name_by_id(group_id)
        if not group_name:
            await query.message.reply_text("‚ùå –¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î!")
            return MAIN_MENU

        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ user_data
        context.user_data["current_group_id"] = group_id
        context.user_data["current_group_name"] = group_name

        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —â–æ –≥—Ä—É–ø—É –æ–±—Ä–∞–Ω–æ
        await query.message.reply_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
        return GROUP_MENU

    # –Ø–∫—â–æ callback_data –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É
    await query.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–±—ñ—Ä.", reply_markup=main_menu_keyboard())
    return MAIN_MENU


# ------------------------ GROUP MENU ------------------------
async def group_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –≥—Ä—É–ø–∏:
    - Add Channel
    - Remove Channel
    - List Channels
    - Set Target
    - Get Target
    - Back to Main Menu
    """
    text = update.message.text
    group_id = context.user_data.get("current_group_id")
    group_name = context.user_data.get("current_group_name")

    if not group_id:
        # –Ø–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É MAIN_MENU
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –æ–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    if text == "‚ûï Add Channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É, —è–∫–∏–π –¥–æ–¥–∞—Ç–∏:")
        return ADDING_CHANNEL

    elif text == "‚ûñ Remove Channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É, —è–∫–∏–π –≤–∏–¥–∞–ª–∏—Ç–∏:")
        return REMOVING_CHANNEL

    elif text == "üìã List Channels":
        channels = list_channels_in_group_db(group_id)
        if channels:
            lines = "\n".join(channels)
            msg = f"–ö–∞–Ω–∞–ª–∏ —É –≥—Ä—É–ø—ñ '{group_name}':\n{lines}"
        else:
            msg = f"–£ –≥—Ä—É–ø—ñ '{group_name}' –Ω–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤."
        await update.message.reply_text(msg, reply_markup=group_menu_keyboard())
        return GROUP_MENU

    elif text == "üéØ Set Target":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É:")
        return SETTING_TARGET

    elif text == "üéØ Get Target":
        target = get_group_target_db(group_id)
        if target:
            msg = f"–¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª –≥—Ä—É–ø–∏ '{group_name}': {target}"
        else:
            msg = f"–£ –≥—Ä—É–ø–∏ '{group_name}' –Ω–µ–º–∞—î target-–∫–∞–Ω–∞–ª—É."
        await update.message.reply_text(msg, reply_markup=group_menu_keyboard())
        return GROUP_MENU

    elif text == "‚¨ÖÔ∏è Back to Main Menu":
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await update.message.reply_text(
            "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    else:
        await update.message.reply_text("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.", reply_markup=group_menu_keyboard())
        return GROUP_MENU

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –≤ –≥—Ä—É–ø—É ---
async def adding_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫–∞–Ω–∞–ª, —è–∫–∏–π —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω—É –≥—Ä—É–ø—É."""
    group_id = context.user_data.get("current_group_id")
    group_name = context.user_data.get("current_group_name")
    channel = update.message.text.strip()

    if add_channel_to_group_db(group_id, channel):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –≤–∂–µ —î —É –≥—Ä—É–ø—ñ –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
            reply_markup=group_menu_keyboard()
        )
    return GROUP_MENU

# --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑ –≥—Ä—É–ø–∏ ---
async def removing_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫–∞–Ω–∞–ª, —è–∫–∏–π —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏."""
    group_id = context.user_data.get("current_group_id")
    group_name = context.user_data.get("current_group_name")
    channel = update.message.text.strip()

    if remove_channel_from_group_db(group_id, channel):
        await update.message.reply_text(
            f"üóë –ö–∞–Ω–∞–ª {channel} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä—É–ø–∏ '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≥—Ä—É–ø—ñ –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
            reply_markup=group_menu_keyboard()
        )
    return GROUP_MENU

# --- –ó–∞–¥–∞–Ω–Ω—è target-–∫–∞–Ω–∞–ª—É ---
async def setting_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å target-–∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏."""
    group_id = context.user_data.get("current_group_id")
    group_name = context.user_data.get("current_group_name")
    channel = update.message.text.strip()

    set_group_target_db(group_id, channel)
    await update.message.reply_text(
        f"üéØ –¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≥—Ä—É–ø–∏ '{group_name}' —Ç–µ–ø–µ—Ä: {channel}",
        reply_markup=group_menu_keyboard()
    )
    return GROUP_MENU


# --------------------- –í–∏—Ö—ñ–¥ —ñ–∑ ConversationHandler ---------------------
async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/cancel –∞–±–æ –∫–æ–º–∞–Ω–¥–∞, —â–æ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É."""
    await update.message.reply_text("–í–∏—Ö—ñ–¥.", reply_markup=None)
    return ConversationHandler.END


# ------------------------------------------------------------------------------------
#                 –û–ë–†–û–ë–ù–ò–ö –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –Ü–ó –ö–ê–ù–ê–õ–Ü–í (–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤)
# ------------------------------------------------------------------------------------

async def channel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –≥—Ä—É–ø–∏ –π —É—Å—ñ –∫–∞–Ω–∞–ª–∏ –≤ –Ω–∏—Ö.
    –Ø–∫—â–æ channel_id / username –≤—Ö–æ–¥–∏—Ç—å —É –≥—Ä—É–ø—É ‚Äì –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ—Å—Ç —É target —Ü—ñ—î—ó –≥—Ä—É–ø–∏.
    –Ø–∫—â–æ target –Ω–µ –∑–∞–¥–∞–Ω–æ, –º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ "–≤ —Å–µ–±–µ".
    """
    channel_id = update.channel_post.chat.id
    username = update.channel_post.chat.username  # None, —è–∫—â–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π
    message_id = update.channel_post.message_id

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # –ë–µ—Ä–µ–º–æ –≤—Å—ñ –≥—Ä—É–ø–∏
    c.execute("SELECT id, name, target_channel FROM groups")
    all_groups = c.fetchall()  # [(g_id, name, target), ...]

    for (g_id, g_name, g_target) in all_groups:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î (channel_id) –∞–±–æ (@username) —É group_channels
        c.execute("""
            SELECT COUNT(*) FROM group_channels
            WHERE group_id = ?
              AND (channel = ? OR channel = ?)
        """, (g_id, str(channel_id), f"@{username}" if username else "_none_"))
        count_row = c.fetchone()
        if count_row and count_row[0] > 0:
            # –¶–µ–π –ø–æ—Å—Ç –Ω–∞–ª–µ–∂–∏—Ç—å –≥—Ä—É–ø—ñ g_id
            if g_target:
                # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ
                try:
                    await context.bot.forward_message(
                        chat_id=g_target,
                        from_chat_id=channel_id,
                        message_id=message_id
                    )
                    logger.info(f"[{g_name}] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∑ {channel_id} –¥–æ {g_target}.")
                except Exception as e:
                    logger.error(f"[{g_name}] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            else:
                logger.info(f"[{g_name}] Target –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")

    conn.close()


# ------------------------------------------------------------------------------------
#                         –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ------------------------------------------------------------------------------------
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    # ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],

        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)
            ],
            ADDING_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adding_group)
            ],
            REMOVING_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, removing_group)
            ],
            # SELECTING_GROUP_TEXT - –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –±–æ —Ç–µ–ø–µ—Ä –≤–∏–±—ñ—Ä —ñ–¥–µ —á–µ—Ä–µ–∑ InlineKeyboard

            GROUP_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, group_menu_handler)
            ],
            ADDING_CHANNEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adding_channel)
            ],
            REMOVING_CHANNEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, removing_channel)
            ],
            SETTING_TARGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, setting_target)
            ],
        },

        fallbacks=[CommandHandler("cancel", cmd_cancel)]
    )

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–æ–∑–º–æ–≤–Ω–∏–∫
    app.add_handler(conv_handler)

    # CallbackQueryHandler –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ "Select Group"
    app.add_handler(CallbackQueryHandler(select_group_callback, pattern=r"^select_group_\d+$"))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ —ñ–∑ –∫–∞–Ω–∞–ª—ñ–≤
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.CHANNEL, channel_post_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()


if __name__ == "__main__":
    main()
