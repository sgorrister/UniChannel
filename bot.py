import os
import sqlite3
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ß–∏—Ç–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

# --- –§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ---
DB_PATH = "channels.db"

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö ---
def init_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            channel TEXT UNIQUE
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS target_channel (
            id INTEGER PRIMARY KEY CHECK (id = 1),
            channel TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_channel_db(channel: str) -> bool:
    """–î–æ–¥–∞—î –∫–∞–Ω–∞–ª (ID –∞–±–æ @username) —É —Å–ø–∏—Å–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO channels (channel) VALUES (?)", (channel,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_channel_db(channel: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –∫–∞–Ω–∞–ª –∑—ñ —Å–ø–∏—Å–∫—É"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM channels WHERE channel = ?", (channel,))
    conn.commit()
    result = c.rowcount > 0
    conn.close()
    return result

def list_channels_db() -> list:
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM channels")
    channels = c.fetchall()
    conn.close()
    return [ch[0] for ch in channels]

def set_target_channel_db(channel: str):
    """–ó–∞–¥–∞—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO target_channel (id, channel) VALUES (1, ?) ON CONFLICT(id) DO UPDATE SET channel=?", (channel, channel))
    conn.commit()
    conn.close()

def get_target_channel_db():
    """–û—Ç—Ä–∏–º—É—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM target_channel WHERE id = 1")
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—î –∫–∞–Ω–∞–ª –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not context.args:
        await update.message.reply_text("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/add_channel @channelname` –∞–±–æ `/add_channel -1001234567890`", parse_mode="Markdown")
        return
    channel = context.args[0]
    if add_channel_db(channel):
        await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.")

async def remove_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–¥–∞–ª—è—î –∫–∞–Ω–∞–ª —ñ–∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    if not context.args:
        await update.message.reply_text("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/remove_channel @channelname` –∞–±–æ `/remove_channel -1001234567890`", parse_mode="Markdown")
        return
    channel = context.args[0]
    if remove_channel_db(channel):
        await update.message.reply_text(f"üóë –ö–∞–Ω–∞–ª {channel} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.")

async def list_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤"""
    channels = list_channels_db()
    if channels:
        text = "üìã –ú–æ–Ω—ñ—Ç–æ—Ä—è—Ç—å—Å—è —Ç–∞–∫—ñ –∫–∞–Ω–∞–ª–∏:\n" + "\n".join(str(ch) for ch in channels)
    else:
        text = "‚ÑπÔ∏è –ù–µ–º–∞—î –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤."
    await update.message.reply_text(text)

async def set_target_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    if not context.args:
        await update.message.reply_text("üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/set_target @mytargetchannel` –∞–±–æ `/set_target -1009876543210`", parse_mode="Markdown")
        return
    channel = context.args[0]
    set_target_channel_db(channel)
    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {channel}")

async def get_target_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    channel = get_target_channel_db()
    if channel:
        await update.message.reply_text(f"üéØ –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {channel}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ö–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–∞–¥–∞–Ω–æ.")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ –∑ –∫–∞–Ω–∞–ª—ñ–≤ ---
async def channel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å–∏–ª–∞—î –ø–æ—Å—Ç–∏ –∑ –º–æ–Ω—ñ—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ —É —Ü—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª"""
    channel_id = update.channel_post.chat.id
    monitored_channels = list_channels_db()
    target_channel = get_target_channel_db() or update.channel_post.chat.id  # –Ø–∫—â–æ –Ω–µ–º–∞—î - –ø–µ—Ä–µ—Å–∏–ª–∞—î –≤ —Å–µ–±–µ

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–∞–Ω–∞–ª —É —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–∑–∞ ID –∞–±–æ username)
    if str(channel_id) in monitored_channels or any(f"@{update.channel_post.chat.username}" == ch for ch in monitored_channels):
        try:
            await context.bot.forward_message(
                chat_id=target_channel,
                from_chat_id=channel_id,
                message_id=update.channel_post.message_id
            )
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {channel_id} —É {target_channel}.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("add_channel", add_channel))
    app.add_handler(CommandHandler("remove_channel", remove_channel))
    app.add_handler(CommandHandler("list_channels", list_channels))
    app.add_handler(CommandHandler("set_target", set_target_channel))
    app.add_handler(CommandHandler("get_target", get_target_channel))
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.CHANNEL, channel_post_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
