import os
import sqlite3
import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –°–¢–ê–ù–ò (ConversationHandler)
MAIN_MENU, ADDING_GROUP, REMOVING_GROUP, GROUP_MENU, ADDING_CHANNEL, REMOVING_CHANNEL, SETTING_TARGET = range(7)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    exit(1)

# –®–ª—è—Ö –¥–æ –±–∞–∑–∏
DB_PATH = "channels.db"


# ------------------------------------------------------------------------------------
#                         –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ –î–ê–ù–ò–•
# ------------------------------------------------------------------------------------

def init_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≥—Ä—É–ø (–∑ user_id) —Ç–∞ –∫–∞–Ω–∞–ª—ñ–≤ —É –≥—Ä—É–ø–∞—Ö."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            target_channel TEXT,
            UNIQUE(user_id, name)
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS group_channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_id INTEGER NOT NULL,
            channel TEXT NOT NULL,
            UNIQUE(group_id, channel),
            FOREIGN KEY(group_id) REFERENCES groups(id) ON DELETE CASCADE
        )
    ''')
    conn.commit()
    conn.close()


# --- –†–æ–±–æ—Ç–∞ –∑ GROUPS ---
def add_group_db(user_id: int, name: str) -> bool:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ user_id –∑ –Ω–∞–∑–≤–æ—é name."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO groups (user_id, name) VALUES (?, ?)", (user_id, name))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_group_db(user_id: int, name: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –≥—Ä—É–ø—É (—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –∫–∞–Ω–∞–ª–∏) —É –¥–∞–Ω–æ–≥–æ user_id."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM groups WHERE user_id = ? AND name = ?", (user_id, name))
    conn.commit()
    deleted = (c.rowcount > 0)
    conn.close()
    return deleted

def list_groups_db(user_id: int) -> list[tuple[str, str|None]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (name, target_channel) —É—Å—ñ—Ö –≥—Ä—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ user_id."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT name, target_channel FROM groups WHERE user_id=? ORDER BY id", (user_id,))
    rows = c.fetchall()
    conn.close()
    return rows

def get_group_id_by_name(user_id: int, name: str) -> int|None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î id –≥—Ä—É–ø–∏ –∑ –Ω–∞–∑–≤–æ—é name –¥–ª—è user_id, –∞–±–æ None."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id FROM groups WHERE user_id=? AND name=?", (user_id, name))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None


# --- –†–æ–±–æ—Ç–∞ –∑ group_channels ---
def add_channel_to_group_db(group_id: int, channel: str) -> bool:
    """–î–æ–¥–∞—î –∫–∞–Ω–∞–ª –¥–æ –≥—Ä—É–ø–∏ group_id."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO group_channels (group_id, channel) VALUES (?, ?)", (group_id, channel))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remove_channel_from_group_db(group_id: int, channel: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –∫–∞–Ω–∞–ª —ñ–∑ –≥—Ä—É–ø–∏."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM group_channels WHERE group_id=? AND channel=?", (group_id, channel))
    conn.commit()
    deleted = (c.rowcount > 0)
    conn.close()
    return deleted

def list_channels_in_group_db(group_id: int) -> list[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ (str) —É –≥—Ä—É–ø—ñ group_id."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT channel FROM group_channels WHERE group_id=?", (group_id,))
    rows = c.fetchall()
    conn.close()
    return [r[0] for r in rows]


# --- –†–æ–±–æ—Ç–∞ –∑ target_channel ---
def set_group_target_db(group_id: int, target_channel: str):
    """–ó–∞–¥–∞—î (–∞–±–æ –∑–º—ñ–Ω—é—î) target_channel –¥–ª—è –≥—Ä—É–ø–∏ group_id."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE groups SET target_channel=? WHERE id=?", (target_channel, group_id))
    conn.commit()
    conn.close()

def get_group_target_db(group_id: int) -> str|None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î target_channel –¥–ª—è –≥—Ä—É–ø–∏ group_id, –∞–±–æ None."""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT target_channel FROM groups WHERE id=?", (group_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None


# ------------------------------------------------------------------------------------
#                         –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# ------------------------------------------------------------------------------------

def main_menu_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï Add Group"), KeyboardButton("‚ûñ Remove Group")],
            [KeyboardButton("üìã List Groups"), KeyboardButton("üîΩ Select Group")],
            [KeyboardButton("‚ùå Exit")],
        ],
        resize_keyboard=True
    )

def group_menu_keyboard():
    """–ú–µ–Ω—é –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï Add Channel"), KeyboardButton("‚ûñ Remove Channel")],
            [KeyboardButton("üìã List Channels"), KeyboardButton("üéØ Set Target")],
            [KeyboardButton("üéØ Get Target"), KeyboardButton("‚¨ÖÔ∏è Back to Main Menu")],
        ],
        resize_keyboard=True
    )


# ------------------------------------------------------------------------------------
#                         –õ–û–ì–Ü–ö–ê –†–û–ó–ú–û–í–ò (ConversationHandler)
# ------------------------------------------------------------------------------------

# --- /start ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç —Ä–æ–∑–º–æ–≤–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å–≤–æ—ó –≥—Ä—É–ø–∏.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# 1) MAIN_MENU: –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç, —â–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —ñ–∑ –∫–Ω–æ–ø–æ–∫ ¬´Add Group¬ª, ¬´Remove Group¬ª —Ç–æ—â–æ.
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "‚ûï Add Group":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏:")
        return ADDING_GROUP

    elif text == "‚ûñ Remove Group":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏:")
        return REMOVING_GROUP

    elif text == "üìã List Groups":
        groups = list_groups_db(user_id)
        if groups:
            lines = []
            for (gname, tgt) in groups:
                lines.append(f"- **{gname}** (target: {tgt if tgt else '–Ω–µ –∑–∞–¥–∞–Ω–æ'})")
            msg = "–í–∞—à—ñ –≥—Ä—É–ø–∏:\n" + "\n".join(lines)
        else:
            msg = "–£ –≤–∞—Å –Ω–µ–º–∞—î –≥—Ä—É–ø."
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=main_menu_keyboard())
        return MAIN_MENU

    elif text == "üîΩ Select Group":
        # –ü–æ–∫–∞–∑—É—î–º–æ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –≥—Ä—É–ø
        groups = list_groups_db(user_id)
        if not groups:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –≥—Ä—É–ø –¥–ª—è –≤–∏–±–æ—Ä—É!", reply_markup=main_menu_keyboard())
            return MAIN_MENU

        keyboard = []
        for (gname, _) in groups:
            # callback_data –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ —ñ–º'—è –≥—Ä—É–ø–∏
            keyboard.append([InlineKeyboardButton(gname, callback_data=f"selectgroup|{gname}")])
        markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=markup)
        # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è —É —Å—Ç–∞–Ω—ñ MAIN_MENU, –∞–ª–µ —Ç–µ–ø–µ—Ä —á–µ–∫–∞—î–º–æ CallbackQuery
        return MAIN_MENU

    elif text == "‚ùå Exit":
        await update.message.reply_text("–ë—É–≤–∞–π!", reply_markup=None)
        return ConversationHandler.END

    else:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

# 2) –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏
async def adding_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_name = update.message.text.strip()

    if add_group_db(user_id, group_name):
        await update.message.reply_text(
            f"‚úÖ –ì—Ä—É–ø—É '{group_name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ì—Ä—É–ø–∞ '{group_name}' –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU

# 3) –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏
async def removing_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_name = update.message.text.strip()

    if remove_group_db(user_id, group_name):
        await update.message.reply_text(
            f"üóë –ì—Ä—É–ø—É '{group_name}' –≤–∏–¥–∞–ª–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ì—Ä—É–ø—É '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU


# --- CALLBACKQUERY –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä—É–ø–∏ (–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ InlineKeyboard) ---
async def select_group_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ callback_data='selectgroup|...' –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ Inline-–∫–Ω–æ–ø–∫—É."""
    query = update.callback_query
    await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —â–æ–± ¬´–∑–Ω–∏–∫–ª–∞¬ª –∞–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    data = query.data  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "selectgroup|MyGroupName"
    prefix, gname = data.split("|", 1)

    if prefix != "selectgroup":
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à—ñ callback'–∏

    user_id = update.effective_user.id
    group_id = get_group_id_by_name(user_id, gname)
    if not group_id:
        # –ú–æ–∂–ª–∏–≤–æ, –≥—Ä—É–ø—É –≤–∏–¥–∞–ª–∏–ª–∏ –º—ñ–∂—á–∞—Å–æ–º
        await query.edit_message_text(
            text=f"–ì—Ä—É–ø—É '{gname}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        )
        return MAIN_MENU

    # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≥—Ä—É–ø—É
    context.user_data["current_group_id"] = group_id
    context.user_data["current_group_name"] = gname

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–µ –±—É–ª–∏ –∫–Ω–æ–ø–∫–∏, —ñ –ø–æ–∫–∞–∑—É—î–º–æ, —â–æ –º–∏ –≤–∏–±—Ä–∞–ª–∏ –≥—Ä—É–ø—É
    await query.edit_message_text(
        text=f"–û–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É '{gname}'.",
    )
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é –≥—Ä—É–ø–∏
    await query.message.reply_text(
        f"–¢–µ–ø–µ—Ä –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –∑ –≥—Ä—É–ø–æ—é '{gname}'.",
        reply_markup=group_menu_keyboard()
    )
    return GROUP_MENU


# 4) –ú–µ–Ω—é –≥—Ä—É–ø–∏
async def group_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    group_id = context.user_data.get("current_group_id")
    group_name = context.user_data.get("current_group_name")

    if not group_id:
        # –Ø–∫—â–æ —á–æ–º—É—Å—å –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ù–µ –æ–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    if text == "‚ûï Add Channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É:")
        return ADDING_CHANNEL

    elif text == "‚ûñ Remove Channel":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
        return REMOVING_CHANNEL

    elif text == "üìã List Channels":
        channels = list_channels_in_group_db(group_id)
        if channels:
            lines = "\n".join(channels)
            msg = f"–ö–∞–Ω–∞–ª–∏ —É –≥—Ä—É–ø—ñ '{group_name}':\n{lines}"
        else:
            msg = f"–£ –≥—Ä—É–ø—ñ '{group_name}' –Ω–µ–º–∞—î –∫–∞–Ω–∞–ª—ñ–≤."
        await update.message.reply_text(msg, reply_markup=group_menu_keyboard())
        return GROUP_MENU

    elif text == "üéØ Set Target":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É:")
        return SETTING_TARGET

    elif text == "üéØ Get Target":
        target = get_group_target_db(group_id)
        if target:
            msg = f"–¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª –≥—Ä—É–ø–∏ '{group_name}': {target}"
        else:
            msg = f"–£ –≥—Ä—É–ø–∏ '{group_name}' –Ω–µ –∑–∞–¥–∞–Ω–æ target-–∫–∞–Ω–∞–ª—É."
        await update.message.reply_text(msg, reply_markup=group_menu_keyboard())
        return GROUP_MENU

    elif text == "‚¨ÖÔ∏è Back to Main Menu":
        await update.message.reply_text(
            "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

    else:
        await update.message.reply_text(
            "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=group_menu_keyboard()
        )
        return GROUP_MENU


# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É —É –≥—Ä—É–ø—É ---
async def adding_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = update.message.text.strip()
    group_id = context.user_data["current_group_id"]
    group_name = context.user_data["current_group_name"]

    if add_channel_to_group_db(group_id, channel):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –≤–∂–µ —î —É –≥—Ä—É–ø—ñ –∞–±–æ –ø–æ–º–∏–ª–∫–∞.",
            reply_markup=group_menu_keyboard()
        )
    return GROUP_MENU

# --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑ –≥—Ä—É–ø–∏ ---
async def removing_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = update.message.text.strip()
    group_id = context.user_data["current_group_id"]
    group_name = context.user_data["current_group_name"]

    if remove_channel_from_group_db(group_id, channel):
        await update.message.reply_text(
            f"üóë –ö–∞–Ω–∞–ª {channel} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≥—Ä—É–ø–∏ '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≥—Ä—É–ø—ñ '{group_name}'.",
            reply_markup=group_menu_keyboard()
        )
    return GROUP_MENU

# --- –ó–∞–¥–∞–Ω–Ω—è target-–∫–∞–Ω–∞–ª—É ---
async def setting_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel = update.message.text.strip()
    group_id = context.user_data["current_group_id"]
    group_name = context.user_data["current_group_name"]

    set_group_target_db(group_id, channel)
    await update.message.reply_text(
        f"üéØ –¶—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≥—Ä—É–ø–∏ '{group_name}' —Ç–µ–ø–µ—Ä: {channel}",
        reply_markup=group_menu_keyboard()
    )
    return GROUP_MENU


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏ ---
async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É."""
    await update.message.reply_text("–í–∏—Ö—ñ–¥.", reply_markup=None)
    return ConversationHandler.END


# ------------------------------------------------------------------------------------
#               –û–ë–†–û–ë–ù–ò–ö –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –Ü–ó –ö–ê–ù–ê–õ–Ü–í (–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤)
# ------------------------------------------------------------------------------------
async def channel_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É,
    –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å —Ü–µ–π –∫–∞–Ω–∞–ª –æ–¥–Ω—ñ–π –∞–±–æ –∫—ñ–ª—å–∫–æ–º –≥—Ä—É–ø–∞–º.
    –Ø–∫—â–æ —Ç–∞–∫ ‚Äì –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —É —ó—Ö–Ω—ñ–π target, —è–∫—â–æ –≤—ñ–Ω –∑–∞–¥–∞–Ω–∏–π.
    """
    channel_id = update.channel_post.chat.id
    username = update.channel_post.chat.username  # None, —è–∫—â–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª –±–µ–∑ username
    msg_id = update.channel_post.message_id

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # –í–∏—Ç—è–≥–∞—î–º–æ –≤—Å—ñ –≥—Ä—É–ø–∏ (—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
    c.execute("SELECT id, name, target_channel FROM groups")
    all_groups = c.fetchall()

    for (g_id, g_name, g_target) in all_groups:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤ group_channels —î –∫–∞–Ω–∞–ª = channel_id (str) –∞–±–æ = @username
        c.execute("""
            SELECT COUNT(*) FROM group_channels
             WHERE group_id=?
               AND (channel=? OR channel=?)
        """, (g_id, str(channel_id), f"@{username}" if username else "_no_username_"))
        (count_chan,) = c.fetchone()

        if count_chan > 0:
            # –¶–µ–π –∫–∞–Ω–∞–ª –≤—Ö–æ–¥–∏—Ç—å –¥–æ –≥—Ä—É–ø–∏ g_id
            if g_target:
                try:
                    await context.bot.forward_message(
                        chat_id=g_target,
                        from_chat_id=channel_id,
                        message_id=msg_id
                    )
                    logger.info(f"[Group: {g_name}] –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∑ {channel_id} –¥–æ {g_target}.")
                except Exception as e:
                    logger.error(f"[Group: {g_name}] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            else:
                logger.info(f"[Group: {g_name}] Target –Ω–µ –∑–∞–¥–∞–Ω–æ, –Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ.")

    conn.close()


# ------------------------------------------------------------------------------------
#                          –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ------------------------------------------------------------------------------------
def main():
    init_db()

    app = Application.builder().token(BOT_TOKEN).build()

    # –°—Ç–≤–æ—Ä—é—î–º–æ ConversationHandler –∑—ñ —Å—Ç–∞–Ω–∞–º–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],

        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler),
                # –û–±—Ä–æ–±–Ω–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ:
                CallbackQueryHandler(select_group_callback, pattern=r"^selectgroup\|.+$"),
            ],
            ADDING_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adding_group)
            ],
            REMOVING_GROUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, removing_group)
            ],
            GROUP_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, group_menu_handler)
            ],
            ADDING_CHANNEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adding_channel)
            ],
            REMOVING_CHANNEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, removing_channel)
            ],
            SETTING_TARGET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, setting_target)
            ],
        },

        fallbacks=[CommandHandler("cancel", cmd_cancel)]
    )
    app.add_handler(conv_handler)

    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—Å—Ç–∏ –∑ –∫–∞–Ω–∞–ª—ñ–≤
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.CHANNEL, channel_post_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()


if __name__ == "__main__":
    main()
